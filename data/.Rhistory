setwd("~/yijuanhu/_RESEARCH/IN-PROGRESS/network/R_TestNet_package")
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen", force=TRUE)
library(roxygen2) # documentation of R package
# Step 1: Create your package directory
setwd("./")
create("TestNet")
R.versions()
R.version()
R.Version()
setwd("~/yijuanhu/_RESEARCH/IN-PROGRESS/network/_R")
n_subj <- 100 # 50, 100, 200, 500, 1000
J <- 100 # 50, 100, 200
clustered_data = 0 # fixed at 0
abs_dist <- "Normal" # Normal, Gamma (mean freq 0.8, 0.04, 0.025, 0.025, 0.01, 0.005,...)
cov_model <- "AR1" # Identity, AR1pos, AR1, AR4, Hub, Block, Sparse, Ushape
lib_model <- "random" # fixed, random
lib_mean <- 10000  # 10000, 30000
disp <- 0.01       # 0.01, 0.001
filter <- "stringent" # lenient, stringent
n_sim <- 1
i_seed <- 1
n_cores <- 4        # 1, 4
plot_results <- 0
Rcpp <- 0          # 1, 0
sam_model <- "NB" # DM or NB
oracle <- FALSE
filename <- paste("C", clustered_data, "_", abs_dist, "_nsubj", n_subj, "_J", J, "_", cov_model, "_omni_", lib_model, lib_mean, "_d", disp, "_", filter, "_seed", i_seed, ".txt", sep="")
#library(dplyr)
library(dirmult) # simPop
library(ANCOMBC) # secom
library(phyloseq) # phyloseq object
#source("NEW_CCA_omni.R")
source("./2024-06-10_FINAL_omni/NEW_CCA_omni_forSim.R")
library(matrixStats)
library(parallel)
library(permute)
library(PRROC) # library(pROC)
library(dcov) # dcov2d
library(MASS) # rnegbin
set.seed(123)
mu <- sort(runif(J, 0, 10), decreasing=TRUE)    # rep(1, J) # sort(runif(J, 0, 10), decreasing=TRUE)
sim_upper_tri <- function(size, prob, rho) {
n_vec <- size*(size-1)/2
n_choose <- floor(n_vec*prob)
vec <- rep(0, n_vec)
choose <- sort(sample(1:n_vec, n_choose))
vec[choose] <- sample(c(rho, -rho), n_choose, replace=TRUE)
mat <- diag(size)
mat[upper.tri(mat)] <- vec
return(mat)
}
if (cov_model == "Identity") {
seed.var <- 1
var_cov <- diag(J) # diag(runif(J, 0.5, 1.5)) # varying variance # diag(J)
} else if (cov_model == "AR1pos") {
seed.var <- 4
set.seed(seed.var)
var_cov <- diag(J)
for (j in 1:(J-1)) var_cov[j,j+1] <- 0.5
var_cov[lower.tri(var_cov)] <- t(var_cov)[lower.tri(var_cov)]
} else if (cov_model == "AR1") {
seed.var <- 4
set.seed(seed.var)
var_cov <- diag(J)
for (j in 1:(J-1)) var_cov[j,j+1] <- sample(c(0.5, -0.5), 1)
var_cov[lower.tri(var_cov)] <- t(var_cov)[lower.tri(var_cov)]
} else if (cov_model == "AR4") {
seed.var <- 1
set.seed(seed.var)
var_cov <- diag(J)
for (j in 1:(J-1)) var_cov[j,j+1] <- 0.4
for (j in 1:(J-2)) var_cov[j,j+2] <- 0.2
for (j in 1:(J-3)) var_cov[j,j+3] <- 0.2
for (j in 1:(J-4)) var_cov[j,j+4] <- 0.1
sign <- sample(c(1, -1), size=J, replace=TRUE)
var_cov <- var_cov*sign
var_cov[lower.tri(var_cov)] <- t(var_cov)[lower.tri(var_cov)]
diag(var_cov) <- 1.5
} else if (cov_model == "Hub") {
seed.var <- 1
set.seed(seed.var)
n_hub <- 3
n_nonhub <- J - n_hub
hub <- sort(sample(1:20, n_hub))
nonhub <- setdiff(1:J, hub)
var_cov <- diag(J)
var_cov <- sim_upper_tri(size=J, prob=0.7, rho=0.3)
var_cov[nonhub, nonhub] <- sim_upper_tri(size=n_nonhub, prob=0.2, rho=0.3)
var_cov <- var_cov + t(var_cov)
if (J==50) diag(var_cov) <- 2.5
if (J==100) diag(var_cov) <- 3.1
if (J==200) diag(var_cov) <- 4.4
} else if (cov_model == "Block") {
seed.var <- 4
set.seed(seed.var)
n.block <- 10
J.perblock <- J/n.block
remain <- 1:J
var_cov <- diag(J)
var_cov <- sim_upper_tri(size=J, prob=0.2, rho=0.3)
for (k in 1:n.block) {
block <- sort(sample(remain, J.perblock))
var_cov[block, block] <- sim_upper_tri(size=J.perblock, prob=0.5, rho=0.3)
remain <- setdiff(remain, block)
}
var_cov <- var_cov + t(var_cov)
if (J==100) diag(var_cov) <- 2.8
if (J==200) diag(var_cov) <- 4.2
} else if (cov_model == "Sparse") {
seed.var <- 3
set.seed(seed.var)
p1 <- floor(sqrt(J))   # 3 => 1 can control T1 with Gamma
n.lower.tri <- (p1-1)*p1/2
choose <- rbinom(n.lower.tri, 1, 0.3)
unif <- runif(n.lower.tri)
unif1 <- ifelse(unif<0.5, unif-1, unif)
B <- matrix(0, nrow=p1, ncol=p1)
B[lower.tri(B)] <- choose*unif1
B <- B + t(B)
epsilon <- max(-min(eigen(B)$values), 0) + 0.01
A1 <- B + epsilon*diag(p1)
A2 <- 4*diag(J-p1)
var_cov <- diag(J)
var_cov[1:p1,1:p1] <- A1
var_cov[(p1+1):J, (p1+1):J] <- A2
} else if (cov_model == "Ushape") {
seed.var <- 1
var_cov <- diag(J)
for (j in seq(2, J, 2)) {
var_cov[j-1, j] <- 1
var_cov[j, j-1] <- 1
}
}
if (cov_model != "Ushape") {
eigen_res <- eigen(var_cov)
w <- which(colSums(eigen_res$vector) < 0)
eigen_res$vector[,w] <- -eigen_res$vector[,w]
F_mat <- eigen_res$vector %*% diag(sqrt(eigen_res$values))
}
set.seed(i_seed*1000+sim)
sim=1
set.seed(i_seed*1000+sim)
# Z (absolute abundance) => Y (true relative abundance)
const <- 1/sqrt(20)  # 10 => 20, more similar rowMaxs(P) and colMaxs(P)
if (!clustered_data) {
Z <- matrix(NA, nrow = n_subj, ncol = J)
if (cov_model != "Ushape") {
for (i in 1:n_subj) Z[i, ] <- mu + F_mat %*% ifelse(rep(abs_dist, J)=="Normal", rnorm(J, mean=0, sd=1), rgamma(J, shape=10, scale=1) * const)
} else if (cov_model=="Ushape") { # nonlinear
for (i in 1:n_subj) Z[i, ] <- mu + ifelse(rep(abs_dist, J)=="Normal", rnorm(J, mean=0, sd=1), rgamma(J, shape=10, scale=1) * const)
for (j in seq(2, J, 2)) {
raw <- poly(x = Z[, j-1], degree = 2, raw = FALSE)[, 2] + rnorm(n_subj, mean=0, sd=0.05)
Z[, j] <- raw / sd(raw) + mu[j]
}
}
n_sam <- n_subj
} else if (clustered_data) {
cluster.size = 4
w.subj <- rep(1:n_subj, each=cluster.size)
CTRL1 = how( plots=Plots(w.subj, type="free"), within=Within(type="free"))
CTRL2 = how( plots=Plots(w.subj, type="free"), within=Within(type="none"))
CTRL3 = how( plots=Plots(w.subj, type="none"), within=Within(type="free")) # inflated everywhere
CTRL4 = how( plots=Plots(1:length(w.subj), type="free")) # inflated T1 when 1. sub_hetero=2 and Identity; 2. 25 cluster x 4 members
Z <- matrix(NA, nrow = n_subj*cluster.size, ncol = J)
if (cov_model != "Ushape") {
for (i in 1:n_subj) {
mu_i <- mu + rnorm(J, mean=0, sd=1) # sd is the hetero parameter
for (s in (cluster.size-1):0) {
Z[cluster.size*i-s, ] <- mu_i +  F_mat %*% ifelse(rep(abs_dist, J)=="Normal", rnorm(J, mean=0, sd=1), rgamma(J, shape=10, scale=1)*const)
}
s <- (cluster.size*(i-1)+1) : (cluster.size*i)
o <- order(Z[s,1])
Z[s,] <- Z[s[o],]
}
} else if (cov_model=="Ushape") { # nonlinear
for (i in 1:n_subj) {
mu_i <- mu + rnorm(J, mean=0, sd=1) # sd is the hetero parameter
for (s in (cluster.size-1):0) {
Z[cluster.size*i-s, ] <- mu_i +  ifelse(rep(abs_dist, J)=="Normal", rnorm(J, mean=0, sd=1), rgamma(J, shape=10, scale=1)*const)
}
s <- (cluster.size*(i-1)+1) : (cluster.size*i)
o <- order(Z[s,1])
Z[s,] <- Z[s[o],]
}
for (j in seq(2, J, 2)) {
raw <- poly(x = Z[, j-1], degree = 2, raw = FALSE)[, 2] + rnorm(n_subj*cluster.size, mean=0, sd=0.05)
Z[, j] <- raw / sd(raw) + mu_i[j]
}
}
n_sam <- cluster.size * n_subj
}
Z <- exp(Z)
colnames(Z) <- paste("taxon", 1:J, sep="")
Y <- Z / rowSums(Z)
# add experimental bias to Z
biased.data <- FALSE
if (biased.data) {
bias.factor <- exp(rnorm(J, 0, 0.5))
Z.biased <- t(t(Z) * bias.factor)
Y.biased <- Z.biased / rowSums(Z.biased)
} else {
Y.biased <- Z / rowSums(Z)
}
# X (observed count)
if (lib_model == "random") {
lib.size <- round(rnorm(n=n_sam, mean=lib_mean, sd=lib_mean/3))
} else if (lib_model == "fixed") {
lib.size <- rep(lib_mean, n_sam)
}
lib.size <- ifelse(lib.size < 2000, 2000, lib.size)
X <- matrix(NA, nrow = n_sam, ncol = J)
if (disp > 0) {
if (sam_model=="DM") {
for (i in 1:n_sam) X[i, ] <- simPop(J = 1, n = lib.size[i], pi = Y.biased[i,], theta = disp)$data # Y.biased[i,]
} else if (sam_model=="NB") {
for (j in 1:J) X[,j] <- rnegbin(n=n_sam, mu = lib.size*Y.biased[,j], theta = 1) # var = u+u^2/theta # Y.biased[,j]; theta=2 for Gamma
}
} else {
for (i in 1:n_sam) X[i,] <- rmultinom(1, lib.size[i], Y.biased[i,]) # Y.biased[i,]
}
colnames(X) <- paste("taxon", 1:J, sep="")
sam_ID <- paste("sam", 1:n_sam, sep="")
rownames(X) <- sam_ID
metadata <- data.frame(sam_ID = sam_ID)
rownames(metadata) <- sam_ID
X[1:5,1:5]
dim(X)
save(X, file="otu.tab.RData")
setwd("~/yijuanhu/_RESEARCH/IN-PROGRESS/network/R_TestNet_package")
# Step 4: Create the documentation
setwd("./TestNet")
document() # or devtools::document()
document() # or devtools::document()
document() # or devtools::document()
document() # or devtools::document()
document() # or devtools::document()
document() # or devtools::document()
getwd()
document() # or devtools::document()
getwd()
setwd("./data")
load("sim.otu.dat.RData")
load("sim.otu.tab.RData")
otu.tab[1:3,1:3]
X[1:3,1:3]
dim(X)
rm(list=ls())
load("sim.otu.tab.RData")
sim.otu.tab <- X
save(sim.otu.tab, file="sim.otu.tab.RData")
document() # or devtools::document()
build() # within your package directory
document() # or devtools::document()
build() # within your package directory
build() # within your package directory
document() # or devtools::document()
build() # within your package directory
